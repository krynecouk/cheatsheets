* Server
** Schema
   Representation of type. Consists of ~Query~ and ~Mutation~
   #+BEGIN_SRC javascript
   module.exports = new GraphQLSchema({
     mutation,
     query: RootQuery
   });
   #+END_SRC
*** Query
    For reading the records.
**** UML
     #+BEGIN_SRC plantuml :file query.txt
     actor query
     participant RootQuery
     participant UserType
     participant CompanyType

     query -> RootQuery
     RootQuery -> UserType
     RootQuery -> CompanyType
     #+END_SRC
**** Template
     #+BEGIN_SRC
     {
        name: '...',
        fields: {
          <field>: {
            type: ...
            args: ...
            resolve(parentValue, args) {...}
          }
        }
      }
     #+END_SRC

     - ~parentValue~
       When field nested then the parent. E.g. Root -> User -> Company, then ~parentValue~ is ~User~.

     - ~args~
       Arguments thatn field need to resolve.

     - ~resolve~
       Function that returns reference to the next piece of data.

**** Example
***** Company Schema
      #+BEGIN_SRC javascript
      const CompanyType = new GraphQLObjectType({
        name: 'Company',
        fields: () => ({
          id: { type: GraphQLString },
          name: { type: GraphQLString },
          description: { type: GraphQLString },
          users: {
            type: new GraphQLList(UserType),
            resolve(parentValue, args) {
              return axios.get(`http://localhost:3000/companies/${parentValue.id}/users`)
                .then(res => res.data)
            }
          }
        })
      });
      #+END_SRC
***** User Schema
      #+BEGIN_SRC javascript
      const UserType = new GraphQLObjectType({
        name: 'User',
        fields: () => ({
          id: { type: GraphQLString },
          firstName: { type: GraphQLString },
          age: { type: GraphQLInt },
          company: {
            type: CompanyType,
            resolve(parentValue, args) {
              return axios.get(`http://localhost:3000/companies/${parentValue.companyId}`)
                .then(res => res.data);
            }
          }
        })
      });
      #+END_SRC
***** Root Schema
      Entry point to the graph.
      #+BEGIN_SRC javascript
      const RootQuery = new GraphQLObjectType({
        name: 'RootQueryType',
        fields: {
          user: {
            type: UserType,
            args: { id: { type: GraphQLString } },
            resolve(parentValue, args) {
              return axios.get(`http://localhost:3000/users/${args.id}`)
                .then(resp => resp.data);
            }
          },
          company: {
            type: CompanyType,
            args: { id: { type: GraphQLString } },
            resolve(parentValue, args) {
              return axios.get(`http://localhost:3000/companies/${args.id}`)
                .then(resp => resp.data);
            }
          }
        }
      });
      #+END_SRC
*** Mutation
    For mutating the records.
**** UML
    #+BEGIN_SRC plantuml :file mutation.txt
    actor mutation
    participant Mutations
    participant addUser
    participant deleteUser

    mutation -> Mutations
    Mutations -> addUser
    Mutations -> deleteUser
    #+END_SRC
**** Template
     #+BEGIN_SRC
     {
        name: '...',
        fields: {
          <mutationFn>: {
            type: ...
            args: {xx: {type: string}}
            resolve(parentValue, args) {...}
          }
        }
      }
     #+END_SRC

     - ~type~
       Return type of ~mutationFn~.

     - ~args~
       Arguments of ~mutationFn~.

**** Example
     #+BEGIN_SRC javascript
     const mutation = new GraphQLObjectType({
       name: 'Mutation',
       fields: {
         addUser: {
           type: UserType,
           args: {
             firstName: { type: new GraphQLNonNull(GraphQLString) },
             age: { type: GraphQLInt },
             companyId: { type: GraphQLString }
           },
           resolve(parentValue, { firstName, age, companyId }) {
             return axios.post('http://localhost:3000/users', { firstName, age, companyId })
               .then(res => res.data);
           }
         },
         deleteUser: {
           type: UserType,
           args: {
             id: { type: new GraphQLNonNull(GraphQLString) }
           },
           resolve(parentValue, { id }) {
             return axios.delete(`http://localhost:3000/users/${id}`)
               .then(res => res.data);
           }
         }
       }
     });
     #+END_SRC

** Query
   #+BEGIN_SRC
   query findUser {
     carl: user(id: "23") {
       id,
       firstName,
       age
     }
     joe: user(id: "47") {
       id,
       firstName,
       age,
       ...userDetails
     }
   }

   fragment userDetails on User {
     address,
     email,
     phone
   }

   mutation {
     addUser(firstName: "Stephen", age: 26) {
       id
       firstName
       age
     }
     deleteUser(id: "23") {
       id
     }
     editUser(id: "40", age: 10) {
       id
       firstName
     }
   }
   #+END_SRC
*** Fragments
    List of different properties that we want to get access to.
* Client
* Sources
  - [[https://github.com/StephenGrider/GraphQLCasts][Stephen Grider: GraphQL Casts]]
