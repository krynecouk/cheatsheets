* Primitives
** Integers
   ~iex> 244~
** Floats
   ~iex> 3.14~
   ~iex> .14~ # error
** Booleans
   ~iex> true~
   ~iex> false~
   - everything is ~true~ except for ~false~ and ~nil~
** Atoms
   ~iex> :foo~
   - constant whose name is its value (~:foo~)
   - analogy to ~Symbol~ in Ruby
   - /"It would be much simpler if we stored identical strings at the same location in memory. Then, checking equality would be a simple pointer or index comparison."/ ([[https://stackoverflow.com/questions/32261500/why-is-useful-to-have-a-atom-type-like-in-elixir-erlang][source]])
** String
   ~iex> "foo"~
* Basic Operations
** Boolean
*** ~||~, ~&&~, ~!~
    ~iex> -20 || true~ #true
    ~iex> nil || "foo"~ #"foo"
    ~iex> "foo" && :bar~ #:bar
    ~iex> false && :bar~ #false
*** ~and~ (~andalso), ~or~ (~orelse), ~not~
    - first argument *must* be ~boolean~
    ~iex> true and 42 #42~
    ~iex> false or true #true~
    ~iex> not false #true~
    ~iex> 42 and true #** (ArgumentError) argument error: 42~
    ~iex> not 42 ** (ArgumentError) argument error~
** Comparison
   ~==~, ~!=~, ~===~, ~!==~, ~<=~, ~>=~, ~<~ and ~>~
*** Comparison order
    number < atom < reference < function < port < pid < tuple < map < list < bitstring
*** String number comparison
    ~iex> 2 == 2.0~ #true
    ~iex> 2 === 2.0~ #false
** String Interpolation
   #+BEGIN_SRC elixir
   name = "Sean"
   "Hello #{name}"
   #+END_SRC
* Collections
** Lists
   #+BEGIN_SRC elixir
   list = [3.14, :pie, "Apple"]
   #+END_SRC
*** Prepending (fast)
    #+BEGIN_SRC elixir
    list = [3.14, :pie, "Apple"]
    ["Ï€" | list]
    #+END_SRC
*** Appending (slow)
    #+BEGIN_SRC elixir
    list = [3.14, :pie, "Apple"]
    list ++ ["Cherry"]
    #+END_SRC
*** Concatenation
    #+BEGIN_SRC elixir
    [1, 2] ++ [3, 4, 1]
    #+END_SRC
*** Substraction
    #+BEGIN_SRC elixir
    ["foo", :bar, 42] -- [42, "bar"]
    #+END_SRC
    #+BEGIN_SRC elixir
    [1,2,2,3,2,3] -- [1,2,3,2]
    #+END_SRC
*** Head
    #+BEGIN_SRC elixir
    hd [3.14, :pie, "Apple"]
    #+END_SRC
*** Tail
    #+BEGIN_SRC elixir
    tl [3.14, :pie, "Apple"]
    #+END_SRC
*** Head/Tail with Pattern Matching
    #+BEGIN_SRC elixir
    [head | tail] = [3.14, :pie, "Apple"]
    #+END_SRC
** Tuples
   #+BEGIN_SRC elixir
   {3.14, :pie, "Apple"}
   #+END_SRC
** Keyword Lists
   Special list of two-element tuples whose first element is an atom. Mostly used for pass options to functions.
   #+BEGIN_SRC elixir
   [{:foo, "bar"}, {:hello, "world"}]
   #+END_SRC
   #+BEGIN_SRC elixir
   [foo: "bar", hello: "world"]
   #+END_SRC
   - Keys are atoms.
   - Keys are ordered.
   - Keys do not have to be unique.
** Maps
*** READ
   #+BEGIN_SRC elixir
   map = %{:foo => "bar", "hello" => :world}
   %{:foo => "bar", "hello" => :world}
   map[:foo]
   #map["hello"]
   #map.hello #only for atom keys
   #+END_SRC
*** UPDATE (existing)
   #+BEGIN_SRC elixir
   map = %{foo: "bar", hello: "world"}
   %{map | foo: "baz"}
   #+END_SRC
*** UPDATE (new)
    #+BEGIN_SRC elixir
    map = %{hello: "world"}
    Map.put(map, :foo, "baz")
    #+END_SRC
* Enum
  Enumeration is at the core of functional programming ([[https://hexdocs.pm/elixir/Enum.html][Enum Docs]], [[https://hexdocs.pm/elixir/Stream.html][Stream Docs]]).
** ~all?/2~
   All must be ~true~ to return ~true~.
   #+BEGIN_SRC elixir
   Enum.all?(["foo", "bar", "hello"], fn(s) -> String.length(s) == 3 end) # false
   Enum.all?(["foo", "bar", "hello"], fn(s) -> String.length(s) > 1 end) # true
   #+END_SRC
** ~any?/2~
   Any must be ~true~ to return ~true~.
   #+BEGIN_SRC elixir
   Enum.any?(["foo", "bar", "hello"], fn(s) -> String.length(s) == 5 end)
   #+END_SRC
** ~chunk_every/2~
   Creates chunk based on the size of second argument.
   #+BEGIN_SRC elixir
   Enum.chunk_every([1, 2, 3, 4, 5, 6], 2)
   #+END_SRC
** ~chunk_by/2~
   Creates chunk when return of function is different than previous call.
   #+BEGIN_SRC elixir
   Enum.chunk_by(["one", "two", "three", "four", "five"], fn(x) -> String.length(x) end)
   #+END_SRC
** ~map_every/3~
   Apply function on every nth (including first) argument with provided function.
   #+BEGIN_SRC elixir
   Enum.map_every([1, 2, 3, 4, 5, 6, 7, 8], 3, fn x -> x + 1000 end)
   #+END_SRC
** ~each/2~
   #+BEGIN_SRC elixir
   Enum.each(["one", "two", "three"], fn(s) -> IO.puts(s) end)
   #+END_SRC
** ~map/2~
   #+BEGIN_SRC elixir
   Enum.map([0, 1, 2, 3], fn(x) -> x - 1 end)
   #+END_SRC
** ~min/1~
   #+BEGIN_SRC elixir
   Enum.min([5, 3, 0, -1])
   #+END_SRC
** ~max/1~
   #+BEGIN_SRC elixir
   Enum.max([5, 3, 0, -1])
   #+END_SRC
** ~filter/2~
   #+BEGIN_SRC elixir
   Enum.filter([1, 2, 3, 4], fn(x) -> rem(x, 2) == 0 end)
   #+END_SRC
** ~reduce/3~
   Accumulator (second argument) is optional. If none is provided than first value is accumulator.
   #+BEGIN_SRC elixir
   Enum.reduce([1, 2, 3], 10, fn(x, acc) -> x + acc end)
   #+END_SRC
** ~sort/1~ (default sorter)
   #+BEGIN_SRC elixir
   Enum.sort([5, 6, 1, 3, -1, 4])
   #+END_SRC
** ~sort/2~ (custom sorter)
   If ~x~ before ~y~ then ~fn~ must return ~true~.
   #+BEGIN_SRC elixir
   Enum.sort([%{:val => 4}, %{:val => 1}], fn(x, y) -> x[:val] > y[:val] end)
   #+END_SRC
** ~uniq/1~
   #+BEGIN_SRC elixir
   Enum.uniq([1, 2, 3, 2, 1, 1, 1, 1, 1])
   #+END_SRC
** ~uniq_by/2~
   #+BEGIN_SRC elixir
   Enum.uniq_by([%{x: 1, y: 1}, %{x: 2, y: 1}, %{x: 3, y: 3}], fn coord -> coord.y end)
   #+END_SRC
* Pattern Matching
** Match Operator
   ~=~ is a *match* operator, *NOT* assignment operator. If match succeeds, it returns value of the equation.
   The match operator performs assignment only when the left side of the match includes a variable.
   #+BEGIN_SRC elixir
   x = 1
   1 = x
   # 2 = x # Error
   #+END_SRC

   Example #1:
   #+BEGIN_SRC elixir
   list = [1, 2, 3]
   [1, 2, 3] = list
   # [] = list # Error
   #+END_SRC

   Example #2:
   #+BEGIN_SRC elixir
   list = [1, 2, 3]
   [1 | tail] = list
   tail # [2, 3]
   # [2 | _] = list # Error
   #+END_SRC

   Example #3:
   #+BEGIN_SRC elixir
   {:ok, value} = {:ok, "Successful!"}
   value # "Successful!"
   # {:ok, value} = {:error} # Error
   #+END_SRC
** Pin Operator
   Match operator performs assignements if left side of matching is variable. Forbid this behavior with =pin= operator.

   Example #1:
   #+BEGIN_SRC elixir
   x = 1
   ^x = 2
   #+END_SRC

   Example #2:
   #+BEGIN_SRC elixir
   x = 1
   {x, ^x} = {2, 1}
   x
   #+END_SRC

   Example #3:
   #+BEGIN_SRC elixir
   key = "hello"
   %{^key => value} = %{"hello" => "world"}
   # %{^key => value} = %{:hello => "world"} # Error
   #+END_SRC
* Control Structures
** ~if/2~
   #+BEGIN_SRC elixir
   if String.valid?("Hello") do
     "Valid string!"
   else
     "Invalid string."
   end
   #+END_SRC
** ~unless/2~
   #+BEGIN_SRC elixir
   unless is_integer("hello") do
     "Not an Int"
   end
   #+END_SRC
** ~case/2~
   Uses pattern matching. In order to not rebind existing variable, use =pin= operator.
   #+BEGIN_SRC elixir
   case {:ok, "Hello World"} do
     {:ok, result} -> result
     {:error} -> "Uh oh!"
     _ -> "Catch all"
   end
   #+END_SRC
** ~guards~
*** TODO [[https://hexdocs.pm/elixir/guards.html#list-of-allowed-expressions][link]]
** ~cond/1~
   Returns first ~true~ condition. If none ~true~ condition is met, then error is thrown.
   #+BEGIN_SRC elixir
   cond do
     2 + 2 == 5 -> "This will not be true"
     2 * 2 == 3 -> "Nor this"
     1 + 1 == 2 -> "But this will"
   end
   #+END_SRC
** ~with/1~
*** TODO [[https://elixirschool.com/en/lessons/basics/control-structures/#with][link]]
* Functions
** Anonymous Functions
   ~fn~ <params> ~->~ <body> ~end~
   #+BEGIN_SRC elixir
   sum = fn (a, b) -> a + b end
   sum.(2, 3)
   sum = &(&1 + &2) # shorthand
   sum.(2, 3)
   #+END_SRC
** Pattern Matching
   #+BEGIN_SRC elixir
   fn
     {:ok, result} -> IO.puts "Handling result..."
     {:ok, _} -> IO.puts "This would be never run as previous will be matched beforehand."
     {:error} -> IO.puts "An error has occurred!"
   end
   some_result = 1
   handle_result.({:ok, some_result}) # Handling result...
   handle_result.({:error}) # An error has occurred!
   #+END_SRC
** Named Functions
   #+BEGIN_SRC elixir
   defmodule Greeter do
   def hello(name) do
       "Hello, " <> name
     end
   end

   Greeter.hello("Sean")

   # shorthand version
   defmodule Greeter do
     def hello(name), do: "Hello, " <> name
   end
   #+END_SRC

   Recursion example:
   #+BEGIN_SRC elixir
   defmodule Length do
     def of([]), do: 0
     def of([_ | tail]), do: 1 + of(tail)
   end
   #+END_SRC

   Function defined by *name* and *arity*. So "overloads" are possible.
   #+BEGIN_SRC elixir
   defmodule Greeter2 do
     def hello(), do: "Hello, anonymous person!"   # hello/0
     def hello(name), do: "Hello, " <> name        # hello/1
     def hello(name1, name2), do: "Hello, #{name1} and #{name2}"
   end
   #+END_SRC
** Functions and Pattern Matching
   - Everything is pattern matched.
   - Elixir matches: 1) arity 2) pattern
   - Each side will pattern match against the incoming argument and bind to whatever it matches with.
   #+BEGIN_SRC elixir
   defmodule Greeter1 do
     def hello(%{name: person_name} = person) do
       IO.puts "Hello, " <> person_name
       IO.inspect person
     end
   end

   Greeter1.hello(%{:name: "Fred", age: "95", favourite_color: "Taupe"})
   #+END_SRC

   - ~person = %{name: "Fred", age: "95", favorite_color: "Taupe"}~
   - ~%{name: person_name} = %{name: "Fred", age: "95", favorite_color: "Taupe"}~
   - ~%{name: person_name} = %{name: "Fred", age: "95", favorite_color: "Taupe"}~

*** What if person = %{name: person_name}
    Same result. It doesn't matter on order. Each argument is pattern matched with passed arg.
   - ~%{name: person_name} = %{name: "Fred", age: "95", favorite_color: "Taupe"}~
   - ~person = %{name: "Fred", age: "95", favorite_color: "Taupe"}~
   - ~%{name: "Fred", age: "95", favorite_color: "Taupe"} = %{name: "Fred"}~
** Private Functions
   ~defp~ and its private within module
   #+BEGIN_SRC elixir
   defmodule Greeter do
     def hello(name), do: phrase() <> name
     defp phrase, do: "Hello, "
   end
   #+END_SRC
** Guards
   ~when~
   #+BEGIN_SRC elixir
   defmodule Greeter do
     def hello(names) when is_list(names) do
       names
       |> Enum.join(", ")
       |> hello
     end

     def hello(name) when is_binary(name) do
       phrase() <> name
     end

     defp phrase, do: "Hello, "
   end
   #+END_SRC
** Default Arguments
   ~\\~
   #+BEGIN_SRC elixir
   def hello(names, language_code \\ "en") when is_list(names) do
     names
       |> Enum.join(", ")
       |> hello(language_code)
   end
   #+END_SRC
* Pipe Operator
  ~|>~
  #+BEGIN_SRC elixir
  "Elixir rocks" |> String.upcase() |> String.split()
  #+END_SRC
* Modules
  Modules allow us to organize functions into a namespace.
  #+BEGIN_SRC elixir
  defmodule Example.Greetings do
    def morning(name) do
      "Good morning #{name}."
    end

    def evening(name) do
      "Good night #{name}."
    end
  end
  #+END_SRC
** Module Attributes
   ~@<name> <value>~ e.g. ~@greeting "Hello"~
** Structs
   ~defstruct~
   Special maps with a defined set of keys and default values. A struct must be defined within a module, which it takes its name from.
   #+BEGIN_SRC elixir
   defmodule Example.User do
     defstruct name: "Sean", roles: []
   end
   %Example.User{name: "Steve"}
   #+END_SRC
** Composition
*** ~alias~
    Allows us to alias module names; used quite frequently in Elixir code:
    #+BEGIN_SRC elixir
    defmodule Example do
      alias Sayings.Greetings, as: Hi
      def print_message(name), do: Hi.basic(name)
    end
    #+END_SRC
*** ~import~
    If we want to import functions rather than aliasing the module we can use import:
    #+BEGIN_SRC elixir
    import List
    last([1, 2, 3])
    #+END_SRC
*** Filtering
    ~import~ can be filtered with ~:only~ and ~:except~ options
    #+BEGIN_SRC elixir
    import List, only: [last: 1]
    import List, except: [last: 1]
    import List, only: :functions
    import List, only: :macros
    #+END_SRC
*** require
    Same as ~import~ but *only* for macros.
    #+BEGIN_SRC elixir
    defmodule Example do
      require SuperMacros
      SuperMacros.do_stuff
    end
    #+END_SRC
*** TODO use
* Mix
  Elixirs maven.
** Create Project
   ~mix new <project-name>~
** =mix.exs=
   ~pom.xml
   #+BEGIN_SRC
   defmodule Example.Mixfile do
     use Mix.Project

     def project do
       [
         app: :example,
         version: "0.1.0",
         elixir: "~> 1.5",
         start_permanent: Mix.env() == :prod,
         deps: deps()
       ]
     end

     def application do
       [
         extra_applications: [:logger]
       ]
     end

     defp deps do
       []
     end
   end
   #+END_SRC
   - project: name of our application (app), specify our version (version), Elixir version (elixir), and finally our dependencies (deps).
** Interactive =mix.exs=
   ~iex -S mix~
** Compilation
   ~mix compile~
** Dependencies
   #+BEGIN_SRC
   def deps do
     [
       {:phoenix, "~> 1.1 or ~> 1.2"},
       {:phoenix_html, "~> 2.3"},
       {:cowboy, "~> 1.0", only: [:dev, :test]},
       {:slime, "~> 0.14"}
     ]
   end
   #+END_SRC

   To update dependecies:
   #+BEGIN_SRC elixir
   mix deps.get
   #+END_SRC
** Environments
   ~:dev~, ~:test~ and ~:prod~ and set in =Mix.env=
   #+BEGIN_SRC
   $ MIX_ENV=prod mix compile
   #+END_SRC
* Sigils
  Alternative syntax for representing and working with literals.
  - ~C Generates a character list with no escaping or interpolation
  - ~c Generates a character list with escaping and interpolation
  - ~R Generates a regular expression with no escaping or interpolation
  - ~r Generates a regular expression with escaping and interpolation
  - ~S Generates a string with no escaping or interpolation
  - ~s Generates a string with escaping and interpolation
  - ~W Generates a word list with no escaping or interpolation
  - ~w Generates a word list with escaping and interpolation
  - ~N Generates a NaiveDateTime struct
  - ~U Generates a DateTime struct (since Elixir 1.9.0)
  [[https://elixirschool.com/en/lessons/basics/sigils/][Examples]]
* Documentation
  ~iex> h <function name>
** Inline
   ~#~
   #+BEGIN_SRC elixir
   # Outputs 'Hello, chum.' to the console.
   IO.puts("Hello, " <> "chum.")
   #+END_SRC
** Modules
   ~@moduledoc~
   #+BEGIN_SRC elixir
   defmodule Greeter do
     @moduledoc """
     Provides a function `hello/1` to greet a human
     """

     def hello(name) do
       "Hello, " <> name
     end
   end
   #+END_SRC
** Functions
   ~@doc~
   #+BEGIN_SRC elixir
   defmodule Greeter do
     @moduledoc """
     ...
     """

     @doc """
     Prints a hello message

     ## Parameters

       - name: String that represents the name of the person.

     ## Examples

         iex> Greeter.hello("Sean")
         "Hello, Sean"

         iex> Greeter.hello("pete")
         "Hello, pete"

     """
     @spec hello(String.t()) :: String.t()
     def hello(name) do
       "Hello, " <> name
     end
   end
   #+END_SRC
** ExDoc
   Example [[https://elixirschool.com/en/lessons/basics/documentation/#exdoc][here]].
* Testing
  ~mix text~
** ExUnit
   #+BEGIN_SRC elixir
   defmodule ExampleTest do
     use ExUnit.Case
     doctest Example

     test "greets the world" do
       assert Example.hello() == :world
     end
   end
   #+END_SRC
*** ~assert~
    Test if ~true~.
*** ~refute~
    Test if ~false~.
*** ~assert_raise~
    Test if ~error~ raised.
*** ~assert_receive~
    Test that ~message~ is received.
    #+BEGIN_SRC elixir
    defmodule SendingProcess do
      def run(pid) do
        send(pid, :ping)
      end
    end

    defmodule TestReceive do
      use ExUnit.Case

      test "receives ping" do
        SendingProcess.run(self())
        assert_received :ping
      end
    end
    #+END_SRC
*** ~capture_io~ and ~capture_log~
    Test app output.
    #+BEGIN_SRC elixir
    defmodule OutputTest do
      use ExUnit.Case
      import ExUnit.CaptureIO

      test "outputs Hello World" do
        assert capture_io(fn -> IO.puts("Hello World") end) == "Hello World\n"
      end
    end
    #+END_SRC
** Test Setup
   ~setup~ & ~setup_all~
   #+BEGIN_SRC elixir
   defmodule ExampleTest do
     use ExUnit.Case
     doctest Example

     setup_all do
       {:ok, recipient: :world}
     end

     test "greets", state do
       assert Example.hello() == state[:recipient]
     end
   end
   #+END_SRC
* Comprehensions
  ~for <generator>, do...j~
** Basics
*** Lists
    #+BEGIN_SRC elixir
    for x <- [1, 2, 3, 4, 5], do: x*x # [1, 4, 9, 16, 25]
    #+END_SRC
*** Keywords
    #+BEGIN_SRC elixir
    for {_key, val} <- [one: 1, two: 2, three: 3], do: val # [1, 2, 3]
    #+END_SRC
*** Maps
    #+BEGIN_SRC elixir
    for {k, v} <- %{"a" => "A", "b" => "B"}, do: {k, v} # [{"a", "A"}, {"b", "B"}]
    #+END_SRC
*** Binaries
    #+BEGIN_SRC elixir
    for <<c <- "hello">>, do: <<c>> # ["h", "e", "l", "l", "o"]
    #+END_SRC
*** Pattern Matching
    #+BEGIN_SRC elixir
    for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val # ["Hello", "World"]
    #+END_SRC
*** Multiple
    #+BEGIN_SRC elixir
    for n <- [1, 2, 3, 4], times <- 1..n do
      String.duplicate("*", times)
    end
    #+END_SRC
** Filters
   When a filtered value returns false or nil it is excluded from the final list.
   #+BEGIN_SRC elixir
   for x <- 1..10, is_even(x), do: x
   #+END_SRC
   #+BEGIN_SRC elixir
   for x <- 1..100,
       is_even(x),
       rem(x, 3) == 0, do: x
   #+END_SRC
** ~:into~
   Different output than ~List~. *Must* implement ~Collectable~ protocol.
   #+BEGIN_SRC elixir
   for {k, v} <- [one: 1, two: 2, three: 3], into: %{}, do: {k, v}
   for c <- [72, 101, 108, 108, 111], into: "", do: <<c>>
   #+END_SRC
* Strings
  More [[https://elixirschool.com/en/lessons/basics/strings/][here]].
** Strings
   Nothing but a sequence of bytes.
   ~string = <<104,101,108,108,111>>~
** Chars
   Elixir strings are enclosed with double quotes, while char lists are enclosed with single quotes.
   ~'hello'~
** Graphemes
   #+BEGIN_SRC elixir
   String.codepoints string
   String.graphemes string
   #+END_SRC
** Functions
*** ~length/1~
    ~String.length "Hello"~
*** ~replace/3~
    ~String.replace("Hello", "e", "a")~
*** ~duplicate/2~
    ~String.duplicate("Oh my ", 3)~
*** ~split/2~
    ~String.split("Hello", " ")~
*** Example
    #+BEGIN_SRC elixir
    defmodule Anagram do
      def anagrams?(a, b) when is_binary(a) and is_binary(b) do
        sort_string(a) == sort_string(b)
      end

      def sort_string(string) do
        string
        |> String.downcase()
        |> String.graphemes()
        |> Enum.sort()
      end
    end
    #+END_SRC
* Date and Time
** Time
   #+BEGIN_SRC elixir
   Time.utc_now
   t = ~T[19:39:31.056226]
   t.hour
   t.minute
   t.day
   #+END_SRC
** Date
   #+BEGIN_SRC elixir
   Date.utc_today
   {:ok, date} = Date.new(2020, 12,12) # {:ok, ~D[2020-12-12]}
   Date.day_of_week date # 6
   Date.leap_year? date # true
   #+END_SRC
** DateTime
   #+BEGIN_SRC elixir
   DateTime.from_naive(~N[2016-05-24 13:26:08.003], "Etc/UTC")
   #+END_SRC
** Timezones
   Follow Docs [[https://elixirschool.com/en/lessons/basics/date-time/#working-with-timezones][here]].
* Mix Tasks
** Custom Mix Task
   ~mix hello~
   =lib/hello.ex=
   #+BEGIN_SRC elixir
   defmodule Hello do
     @doc """
     Outputs `Hello, World!` every time.
     """
     def say do
       IO.puts("Hello, World!")
     end
   end
   #+END_SRC

   =hello/lib/mix/tasks/hello.ex=
   #+BEGIN_SRC elixir
   defmodule Mix.Tasks.Hello do
     use Mix.Task

     @shortdoc "Simply calls the Hello.say/0 function."
     def run(_) do
       # calling our Hello.say() function from earlier
       Hello.say()
     end
   end
   #+END_SRC
* IEx Helpers
  - ~h~ : help
  - ~i~ : data type info
  - ~r~ : recompile
  - ~t~ : type
* Best Practices
  [[https://github.com/christopheradams/elixir_style_guide][Elixir style guide]]
  [[https://github.com/elixir-lang/elixir/blob/master/lib/elixir/pages/Naming%2520Conventions.md][Naming conventions]]
