#+TITLE: MOS_6502
* Main parts
- ALU (arithmetic logic unit)
- 7 registers
** ALU
- responsible for carrying out fundamental binary arithmetic and logical operations
- reads from two 8-bit input registers (A and B) and outputs its result on the Output register
** Registers
|----+--------+------------------|
| A  | 8-bit  | Accumulator      |
| X  | 8-bit  | Index register   |
| Y  | 8-bit  | Index register   |
| SP | 16-bit | Stack pointer    |
| PC | 16-bit | Program counter  |
| P  | 8-bit  | Processor status |
|----+--------+------------------|
*** A
The accumulator is a general purpose 8-bit register that stores the results of most arithmetic and logic operations.
*** X & Y
These registers can be used for general purpose storage (variables as ~counter~ etc.).
*** SP
- Holds pointer to the stack.
- 16-bit register (address in MOS 6502 is represented as 16-bit) that holds the address to the last element in stack.
*** PC
- Holds pointer to the ROM.
- 16-bit register (as SP) because holds address to the next program instruction in ROM.
*** P
- 8-bit register with bit flags:
|---+---+---+---+---+---+---+---|
| N | V |   | B | D | I | Z | C |
|---+---+---+---+---+---+---+---|
**** C (Carry)
~1~ if overlow of binary addition/substraction happend.

#+BEGIN_SRC
1 = Carry Set
0 = Carry Clear
#+END_SRC
***** Example
#+BEGIN_SRC
1001
  11
----
   0    ; carry = 1
  0     ; carry = 1
 1      ; carry = 0
1       ; carry = 0
#+END_SRC
**** Z (Zero)
~1~ if the last computation was ~0~. Used for loops (~if 0 then~).

#+BEGIN_SRC
1 = Zero Result
0 = Non-Zero Result
#+END_SRC
**** I (IRQ Disable)
IRQ is an interrupt generated by any one of three conditions' Counter Overflow. PAO Positive Edge Detected.

#+BEGIN_SRC
1 = IRQ Interrupt Disabled
0 = IRQ Interrupt Enabled
#+END_SRC
**** D (Decimal Mode)
The Decimal Mode Bit (D), is used to control the arithmetic mode of the CPU.

#+BEGIN_SRC
1 = Decimal Mode
0 = Binary Mode
#+END_SRC
**** B (Break Instruction)
When used then we can break (stop) the execution and e.g. test/debug the code.

#+BEGIN_SRC
1 - Break Command
0 = Not Break Command
#+END_SRC
**** V (Overflow)
If overlow from e.g. positive to negative happend.

#+BEGIN_SRC
1 = Overflow Set
0 = Overflow Clear
#+END_SRC
**** N (Negative)
If the last computation was negative.

#+BEGIN_SRC
1 - Negative Value
0 = Positive Vaiue
#+END_SRC

* Sources
1. [[https://twitalu.wordpress.com/2013/06/25/introductions-and-the-6502-alu/][Twitalu Blog]]
2. [[http://archive.6502.org/datasheets/mos_6500-1_one-chip_microcomputer_oct_1986.pdf][6500 processor docs]]
